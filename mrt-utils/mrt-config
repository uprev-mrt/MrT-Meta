#!/usr/bin/python3

import ctypes

#
# class disable_file_system_redirection:
#     _disable = ctypes.windll.kernel32.Wow64DisableWow64FsRedirection
#     _revert = ctypes.windll.kernel32.Wow64RevertWow64FsRedirection
#     def __enter__(self):
#         self.old_value = ctypes.c_long()
#         self.success = self._disable(ctypes.byref(self.old_value))
#     def __exit__(self, type, value, traceback):
#         if self.success:
#             self._revert(self.old_value)

import sys
import os
from sys import platform
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import QFont
from PyQt5.QtWebEngineWidgets import QWebEngineView
import os.path
import re
import subprocess
import markdown
from threading import Thread

relativePath = ""
projectGitPath=""

sys.argv.append("--disable-web-security")
app     = QApplication (sys.argv)
webview = QWebEngineView()
tree    = QTreeWidget ()


def getGitFileText(url, file):
    txt=""
    try:
        str = 'git archive --remote=' + url +' HEAD '+ file + ' | tar -xOf - ' + file
        txt = subprocess.check_output(str,shell=True, encoding='utf8')
    except subprocess.CalledProcessError as e:
        print(" Repo at " + url+ " does not contain " + file)

    return txt


class submodule:
    def __init__(self, path, url):
        self.url = url.replace(':','/')
        self.git_url = url
        self.path = path
        self.nodes = path.split('/')
        self.name = self.nodes[-1]
        self.exists = False
        self.requirements = []
        self.readme="x"

    def addToTree(self, parent):
        child = QTreeWidgetItem(parent)
        child.setFlags(child.flags() | Qt.ItemIsUserCheckable)
        child.setText(0, self.name)
        child.mod = self
        if self.exists:
            child.setCheckState(0, Qt.Checked)
            parent.setExpanded(True)
        else:
            child.setCheckState(0, Qt.Unchecked)
        self.node = child

    def checkFor(self,mods):
        global relativePath
        for mod in mods:
            if(self.url == mod.url):
                self.exists = True

    def getReadMe(self):
        self.readme = getGitFileText('ssh://' + self.url.replace(':','/'), 'README.md')

        if(self.readme == ""):
            self.readme = "# No README.md is available for this module"


    def gatherRequirements(self):
            self.requirements = []
            #read in all modules
            regex = re.compile(r'>Requires: (.*?)')
            reqs = regex.findall(self.readme)
            for req in requirements:
                self.requirements.append(req[1])


    def addToRepo(self):
        global relativePath
        global projectGitPath
        sys.stdout.write("git submodule add " + self.git_url+ " " + relativePath + self.path+ "\n")
        #subprocess.check_output(['git','--git-dir','submodule'projectGitPath,'log'] )
        path = os.getcwd()
        os.chdir(projectGitPath)
        subprocess.check_output(['git','submodule','add', self.git_url,  relativePath + self.path] )
        os.chdir(path)
        self.exists = True

    def removeFromRepo(self):
        global relativePath
        global projectGitPath

        path = os.getcwd()
        os.chdir(projectGitPath)
        sys.stdout.write("git submodule rm " + relativePath + self.path+ "\n")
        subprocess.check_output(['git','--git-dir',projectGitPath,'submodule','rm', relativePath + self.path ])
        os.chdir(path)
        self.exists = False

class directory:
    def __init__(self, name,lvl):
        self.name = name
        self.dirs = {}
        self.mods = {}
        self.mod = submodule('','')
        self.isMod = False
        self.lvl = lvl

    def setMod(self,mod):
        self.mod = mod
        self.isMod = True


    def add(self, mod, lvl):

        nodes = mod.path.split('/')[lvl:]

        #print nodes[lvl:]

        if(len(nodes) > 1):
            node = nodes[0]
            if not node in self.dirs:
                self.dirs[node] = directory(node, lvl)
            self.dirs[node].add(mod,lvl+1)
            if node in self.mods:
                self.dirs[node].setMod(self.mods[node])
                del self.mods[node]
        else:
            if mod.name in self.dirs:
                self.dirs[mod.name].set(mod)
            else:
                self.mods[mod.name] = mod

    def printout(self,lvl):
        start =""
        for i in range(lvl):
            start = start+"   "
            sys.stdout.write("---")

        sys.stdout.write(self.name + "\n")

        for mod in self.mods:
            sys.stdout.write(start + "+" +mod.name +"\n")

        for dir in self.dirs.values():
            dir.printout(lvl+1)

    def addToTree(self, parent):
        newnode = QTreeWidgetItem(parent)
        newnode.setText(0,self.name)

        if self.lvl < 2:
            font = QFont()
            font.setPointSize(12)
            font.setWeight(QFont.Bold)
            newnode.setFont(0,font)

        newnode.setFlags(newnode.flags() | Qt.ItemIsTristate | Qt.ItemIsUserCheckable)
        newnode.setExpanded(True)
        newnode.mod = self.mod

        if(self.isMod):
            self.mod.node = newnode

        for dir in self.dirs.values():
            dir.addToTree(newnode)

        for mod in self.mods.values():
            mod.addToTree(newnode)


newRoot = directory('MrT',0)
oldRoot = directory('old',0)

def getReadMe():
    data = getGitFileText('ssh://git@bitbucket.org/uprev/uprev-mrt.git', 'README.md')
    return data

def getRemoteSubModules(url):
    data = getGitFileText('ssh://git@bitbucket.org/uprev/uprev-mrt.git','.gitmodules').replace('\r', '').replace('\n', '').replace('\t', '')

    mods = []
    #read in all modules
    regex = re.compile(r'\[(.*?)].*?path = (.*?)url = (.*?.git)')
    modules = regex.findall(data)
    for mod in modules:
        if(mod[1] != "Config"):
            mods.append(submodule(mod[1], mod[2]))

    return mods

def getSubModules(path):
    mods = []
    if os.path.isfile(path):
        file = open(path, "r")
        data = file.read().replace('\r', '').replace('\n', '').replace('\t', '')

        #read in all modules
        regex = re.compile(r'\[(.*?)].*?path = (.*?)url = (.*?\.git)')
        modules = regex.findall(data)
        for mod in modules:
            mods.append(submodule(mod[1], mod[2]))

    return mods

localMods = []
remoteMods = []

def fetchReadmes():
    print ("Fetching README.md from modules")
    for mod in remoteMods:
        mod.getReadMe()

def buttonPress():
    global remoteMods
    global localMods

    for mod in remoteMods:
        if(mod.node.checkState(0) > 0) and not (mod.exists):
            mod.addToRepo()

        if(mod.node.checkState(0) == 0) and (mod.exists):
            mod.removeFromRepo()

    msg = QMessageBox()
    msg.setText("Done importing submodules!")
    msg.setStandardButtons(QMessageBox.Ok | QMessageBox.Close)
    retval = msg.exec_()
    if(retval == QMessageBox.Close):
        QCoreApplication.quit()


def itemSelected():
    getSelected = tree.selectedItems()
    if getSelected:
        if(getSelected[0].mod.readme == "x"):
            getSelected[0].mod.getReadMe()
        webview.setHtml(markdown.markdown(getSelected[0].mod.readme))


def main():
    global newRoot
    global oldRoot
    global remoteMods
    global localMods
    global webview
    global app
    global tree
    global projectGitPath
    global relativePath

    window = QWidget()
    window.setGeometry(0, 0, 1000, 640)
    editPath = QLineEdit()
    btnBrowse = QPushButton("Import Submodules")
    btnBrowse.clicked.connect(buttonPress)
    window.setWindowTitle("Mr T module tool")
    layout = QGridLayout(window)
    readme = getReadMe()

    tree.selectionModel().selectionChanged.connect(itemSelected)
    webview.setHtml(markdown.markdown(readme))

    layout.addWidget(tree,0,0,4,1)
    layout.addWidget(webview, 0,1,4,3)
    layout.addWidget(btnBrowse,4,0,1,4)
    headerItem  = QTreeWidgetItem()
    item    = QTreeWidgetItem()


    projectGitPath = os.getcwd()
    relativePath = "MrT"

    if len(sys.argv) > 1:
        relativePath = sys.argv[1]

    relativePath +="/"

    #check for git repo
    if not os.path.exists(projectGitPath + "/.git"):
        subprocess.check_output(['git','init'] )

    remoteMods = getRemoteSubModules('--remote=ssh://git@bitbucket.org/uprev/uprev-mrt.git')
    localMods = getSubModules(projectGitPath + '.gitmodules')

    for mod in remoteMods:
        mod.checkFor(localMods)


    for mod in remoteMods:
        newRoot.add(mod,0)
        #mod.getReadMe()

    newRoot.addToTree(tree)

    t = Thread(target=fetchReadmes)
    t.start()

    window.show()

    sys.exit(app.exec_())

if __name__ == '__main__':
    main()
