mrt-version
===========

``mrt-version`` is a tool for managing the version information in a project. It keeps the version information in a header file, and provides a convenient way to update it and use the version with continuous integration tools. 

Creating the header file 
------------------------

.. code-block:: bash 

    mrt-version main/version.h

This will create the header file, with the initial version set to 0.0.0.0

.. code-block:: C 

    /**
     * @file version.h
     * @author generated by mrt-version (https://github.com/uprev-mrt/mrtutils)
     * @brief version header
     * @date 05/01/21
     */

    #define VERSION_MAJOR      0
    #define VERSION_MINOR      0
    #define VERSION_PATCH      0 
    #define VERSION_BUILD      0 
    #define VERSION_BRANCH     "master"
    #define VERSION_COMMIT     "c4526b4ec43b9a74c572bfbb6059b65bce4b0029"

    #define VERSION_STRING "0.0.0.0"

.. note:: To include repo information, call the tool from the root of the projects repo. when the branch is not 'master' an '*' will be added to the end of VERSION_STRING. This makes it clear to the user/tester that they are not using an official build


Updating the Version 
--------------------

After the initial file is created, you can set specific parts with the command line arguments (--major,--minor,--patch, --build). You can set these to a specific value, or increment them.


.. code-block:: bash 

    mrt-version main/version.h --patch +1 --build 44


.. code-block:: c 

    #define VERSION_MAJOR      0
    #define VERSION_MINOR      0
    #define VERSION_PATCH      1 
    #define VERSION_BUILD      44 
    #define VERSION_BRANCH     "master"
    #define VERSION_COMMIT     "c4526b4ec43b9a74c572bfbb6059b65bce4b0029"

    #define VERSION_STRING "0.0.1.44"


.. note:: Incrementing ``Minor`` will reset ``Patch`` to 0, and incrementing ``Major`` will reset ``Minor`` and ``Patch`` to 0. 


Build System/Webhook integration
--------------------------------

The tool will always output the version string so it can be easily used for other things such as git tags and documentation. 

In this example ``patch`` is incremented by 1, and then the commit is tagged in the repo with the output (i.e. 'v2.1.3')

.. code-block:: bash 

    VERSION_STR=$(mrt-version main/version.h --patch +1 )  
    git tag -a $VERSION_STR -m "Adding Version Tag"

.. note:: output format is vMajor.Minor.Patch. use the --full argument if you want the build number included in the output. 


Future Improvements
-------------------

The next step will be to have this tool generate and update changelog as the version is updated.
